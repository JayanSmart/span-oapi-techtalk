/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.EmployeeInfoSchema;
import io.swagger.model.InputError;
import org.threeten.bp.LocalDate;
import io.swagger.model.ServerError;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-25T15:44:43.284425+02:00[Africa/Johannesburg]")
@Validated
public interface TenureApi {

    @Operation(summary = "get tenure by ID", description = "return the tenure of some given employee, when given the ID of that employee", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response containing the Employee name, id and tenure", content = @Content(schema = @Schema(implementation = EmployeeInfoSchema.class))),
        
        @ApiResponse(responseCode = "404", description = "Not found response", content = @Content(schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "500", description = "Server Error", content = @Content(schema = @Schema(implementation = ServerError.class))) })
    @RequestMapping(value = "/tenure",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EmployeeInfoSchema> getTenureById(@NotNull @Min(0)@Parameter(in = ParameterIn.QUERY, description = "ID of employee whose tenure is to be returned" ,required=true,schema=@Schema(allowableValues={  }
)) @Valid @RequestParam(value = "id", required = true) Integer id);


    @Operation(summary = "Update the start date of an employee.", description = "Update the startDate value of some employee by providing their id and the new start date.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response containing the Employee name, id and tenure", content = @Content(schema = @Schema(implementation = EmployeeInfoSchema.class))),
        
        @ApiResponse(responseCode = "404", description = "Not found response", content = @Content(schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "500", description = "Server Error", content = @Content(schema = @Schema(implementation = ServerError.class))) })
    @RequestMapping(value = "/tenure",
        produces = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<EmployeeInfoSchema> patchTenure(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of employee whose tenure is to be returned" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) Integer id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The date (YYYY-MM-DD) on which the employee started. If not provided, the current date will be used." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "StartDate", required = true) String startDate);


    @Operation(summary = "POST new employee information", description = "Upload new employee information to the server", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response containing the Employee name, id and tenure", content = @Content(schema = @Schema(implementation = EmployeeInfoSchema.class))),
        
        @ApiResponse(responseCode = "422", description = "Invalid Input", content = @Content(schema = @Schema(implementation = InputError.class))),
        
        @ApiResponse(responseCode = "500", description = "Server Error", content = @Content(schema = @Schema(implementation = ServerError.class))) })
    @RequestMapping(value = "/tenure",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EmployeeInfoSchema> postTenure(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The name of the new Employee" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "EmployeeName", required = true) String employeeName, @Parameter(in = ParameterIn.QUERY, description = "The date (YYYY-MM-DD) on which the employee started. If not provided, the current date will be used." ,schema=@Schema()) @Valid @RequestParam(value = "StartDate", required = false) LocalDate startDate);

}


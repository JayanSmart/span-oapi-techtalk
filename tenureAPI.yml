---
openapi: "3.0.2"
info:
  title: SPAN Tenure
  version: 0.0.1
  contact:
    name: Jayan Smart
    email: jayan.smart@spandigital.com
    url: https://github.com/JayanSmart/span-oapi-techtalk
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: This is a simple API which is used to as a demo for using OpenAPI to define specifications.
servers:
  - url: https://api.server.test/v1
    description: Test server
paths:
  /:
    get:
      operationId: listVersions
      summary: List API versions
      responses:
        "200":
          description: |-
            200 response
          content:
            application/json:
              example:
                {
                  "versions":
                    [
                      {
                        "status": "CURRENT",
                        "updated": "2011-01-21T11:33:21Z",
                        "id": "v2.0",
                        "links":
                          [
                            {
                              "href": "http://127.0.0.1:8774/v2/",
                              "rel": "self",
                            },
                          ],
                      },
                      {
                        "status": "EXPERIMENTAL",
                        "updated": "2013-07-23T11:33:21Z",
                        "id": "v3.0",
                        "links":
                          [
                            {
                              "href": "http://127.0.0.1:8774/v3/",
                              "rel": "self",
                            },
                          ],
                      },
                    ],
                }
        "300":
          description: |-
            300 response
          content:
            application/json:
              examples:
                foo:
                  value: |
                    {
                     "versions": [
                           {
                             "status": "CURRENT",
                             "updated": "2011-01-21T11:33:21Z",
                             "id": "v2.0",
                             "links": [
                                 {
                                     "href": "http://127.0.0.1:8774/v2/",
                                     "rel": "self"
                                 }
                             ]
                         },
                         {
                             "status": "EXPERIMENTAL",
                             "updated": "2013-07-23T11:33:21Z",
                             "id": "v3.0",
                             "links": [
                                 {
                                     "href": "http://127.0.0.1:8774/v3/",
                                     "rel": "self"
                                 }
                             ]
                         }
                     ]
                    }
                bar:
                  value: |
                    {
                     "versions": [
                           {
                             "status": "ANOTHER",
                             "updated": "2011-01-21T11:33:21Z",
                             "id": "v2.0",
                             "links": [
                                 {
                                     "href": "http://127.0.0.1:8774/v2/",
                                     "rel": "self"
                                 }
                             ]
                         },
                         {
                             "status": "FOOBAR",
                             "updated": "2013-07-23T11:33:21Z",
                             "id": "v3.0",
                             "links": [
                                 {
                                     "href": "http://127.0.0.1:8774/v3/",
                                     "rel": "self"
                                 }
                             ]
                         }
                     ]
                    }
  /tenure:
    get:
      operationId: getTenureById
      summary: get tenure by ID
      description: return the tenure of some given employee, when given the ID of that employee
      parameters:
        - name: "id"
          in: query
          description: "ID of employee whose tenure is to be returned"
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/SuccessfulTenureResponse"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref:   "#/components/responses/500"
    post:
      operationId: postTenure
      summary: POST new employee information
      description: Upload new employee information to the server
      parameters:
        - name: "EmployeeName"
          description: "The name of the new Employee"
          required: True
          in: query
          schema:
            type: string
        - name: "StartDate"
          description: "The date (YYYY-MM-DD) on which the employee started. If not provided, the current date will be used."
          in: query
          schema:
            format: date
            type: string
      responses:
        "200":
          $ref: "#/components/responses/SuccessfulTenureResponse"
        "422":
          description: Invalid Input
          content:
            application/json:
              schema:
                title: InputError
                type: object
                properties:
                  response:
                    type: string
                    description: Information about the error which has occurred.
                example: { "response": "The input provided failed validation, please review your parameters." }
                    
        "500":
          $ref:   "#/components/responses/500"
    patch:
      operationId: PatchTenure
      summary: Update the start date of an employee.
      description: Update the startDate value of some employee by providing their id and the new start date.
      parameters:
        - name: "id"
          in: query
          description: "ID of employee whose tenure is to be returned"
          required: true
          schema:
            type: integer
        - name: "StartDate"
          description: "The date (YYYY-MM-DD) on which the employee started. If not provided, the current date will be used."
          in: query
          required: true
          schema:
            type: string
      responses: 
        "200":
          $ref:  "#/components/responses/SuccessfulTenureResponse"
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref:   "#/components/responses/500"


components:
  responses:
    "404":
      description: Not found response
      content:
        application/json:
          schema:
            title: Resource not found
            type: string
            example: { "response": "Resource not found." }
    "500":
      description: Server Error
      content:
        application/json:
          schema:
            title: ServerError
            type: object
            properties:
              response:
                type: string
                description: Information about the error which has occurred.
            example: { "response": "An internal server error has occurred." }
    "SuccessfulTenureResponse":
      description: Successful response containing the Employee name, id and tenure
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EmployeeInfoSchema"
  schemas:
    "EmployeeInfoSchema":
      title: EmployeeInfoSchema
      type: object
      properties:
        id:
          description: The id of the employee
          type: integer
          example: 1
        name:
          description: The employee name
          type: string
          default: "Not Available"
          example: Joe Soap
        tenure:
          description: The tenure of an employee in days
          type: integer
          example: 371

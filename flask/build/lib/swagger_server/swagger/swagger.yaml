openapi: 3.0.2
info:
  title: SPAN Tenure
  description: This is a simple API which is used to as a demo for using OpenAPI to
    define specifications.
  contact:
    name: Jayan Smart
    url: https://github.com/JayanSmart/span-oapi-techtalk
    email: jayan.smart@spandigital.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.0.1
servers:
- url: https://api.server.test/v1
  description: Test server
paths:
  /:
    get:
      summary: List API versions
      operationId: list_versions
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              example:
                versions:
                - status: CURRENT
                  updated: 2011-01-21T11:33:21Z
                  id: v2.0
                  links:
                  - href: http://127.0.0.1:8774/v2/
                    rel: self
                - status: EXPERIMENTAL
                  updated: 2013-07-23T11:33:21Z
                  id: v3.0
                  links:
                  - href: http://127.0.0.1:8774/v3/
                    rel: self
        "300":
          description: 300 response
          content:
            application/json:
              examples:
                foo:
                  value: "{\n \"versions\": [\n       {\n         \"status\": \"CURRENT\"\
                    ,\n         \"updated\": \"2011-01-21T11:33:21Z\",\n         \"\
                    id\": \"v2.0\",\n         \"links\": [\n             {\n     \
                    \            \"href\": \"http://127.0.0.1:8774/v2/\",\n      \
                    \           \"rel\": \"self\"\n             }\n         ]\n  \
                    \   },\n     {\n         \"status\": \"EXPERIMENTAL\",\n     \
                    \    \"updated\": \"2013-07-23T11:33:21Z\",\n         \"id\":\
                    \ \"v3.0\",\n         \"links\": [\n             {\n         \
                    \        \"href\": \"http://127.0.0.1:8774/v3/\",\n          \
                    \       \"rel\": \"self\"\n             }\n         ]\n     }\n\
                    \ ]\n}\n"
                bar:
                  value: "{\n \"versions\": [\n       {\n         \"status\": \"ANOTHER\"\
                    ,\n         \"updated\": \"2011-01-21T11:33:21Z\",\n         \"\
                    id\": \"v2.0\",\n         \"links\": [\n             {\n     \
                    \            \"href\": \"http://127.0.0.1:8774/v2/\",\n      \
                    \           \"rel\": \"self\"\n             }\n         ]\n  \
                    \   },\n     {\n         \"status\": \"FOOBAR\",\n         \"\
                    updated\": \"2013-07-23T11:33:21Z\",\n         \"id\": \"v3.0\"\
                    ,\n         \"links\": [\n             {\n                 \"\
                    href\": \"http://127.0.0.1:8774/v3/\",\n                 \"rel\"\
                    : \"self\"\n             }\n         ]\n     }\n ]\n}\n"
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /tenure:
    get:
      summary: get tenure by ID
      description: "return the tenure of some given employee, when given the ID of\
        \ that employee"
      operationId: get_tenure_by_id
      parameters:
      - name: id
        in: query
        description: ID of employee whose tenure is to be returned
        required: true
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      responses:
        "200":
          description: "Successful response containing the Employee name, id and tenure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeInfoSchema'
        "404":
          description: Not found response
          content:
            application/json:
              schema:
                title: Resource not found
                type: string
                example: "{\"response\":\"Resource not found.\"}"
                x-content-type: application/json
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      summary: POST new employee information
      description: Upload new employee information to the server
      operationId: post_tenure
      parameters:
      - name: EmployeeName
        in: query
        description: The name of the new Employee
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: StartDate
        in: query
        description: "The date (YYYY-MM-DD) on which the employee started. If not\
          \ provided, the current date will be used."
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: "Successful response containing the Employee name, id and tenure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeInfoSchema'
        "422":
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-openapi-router-controller: swagger_server.controllers.default_controller
    patch:
      summary: Update the start date of an employee.
      description: Update the startDate value of some employee by providing their
        id and the new start date.
      operationId: patch_tenure
      parameters:
      - name: id
        in: query
        description: ID of employee whose tenure is to be returned
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: StartDate
        in: query
        description: "The date (YYYY-MM-DD) on which the employee started. If not\
          \ provided, the current date will be used."
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: "Successful response containing the Employee name, id and tenure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeInfoSchema'
        "404":
          description: Not found response
          content:
            application/json:
              schema:
                title: Resource not found
                type: string
                example: "{\"response\":\"Resource not found.\"}"
                x-content-type: application/json
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    EmployeeInfoSchema:
      title: EmployeeInfoSchema
      type: object
      properties:
        id:
          type: integer
          description: The id of the employee
          example: 1
        name:
          type: string
          description: The employee name
          example: Joe Soap
          default: Not Available
        tenure:
          type: integer
          description: The tenure of an employee in days
          example: 371
      example:
        name: Joe Soap
        id: 1
        tenure: 371
    ServerError:
      title: ServerError
      type: object
      properties:
        response:
          type: string
          description: Information about the error which has occurred.
      example:
        response: An internal server error has occurred.
    InputError:
      title: InputError
      type: object
      properties:
        response:
          type: string
          description: Information about the error which has occurred.
      example:
        response: "The input provided failed validation, please review your parameters."
  responses:
    "404":
      description: Not found response
      content:
        application/json:
          schema:
            title: Resource not found
            type: string
            example: "{\"response\":\"Resource not found.\"}"
            x-content-type: application/json
    "500":
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerError'
    SuccessfulTenureResponse:
      description: "Successful response containing the Employee name, id and tenure"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmployeeInfoSchema'

